Grundlage für VBScript
Autor: Yi Miao 
Ort: Heidelberg

# 1
# VBScript ist eine interpretierte Script-Sprache.
# Es gibt keine Funktion für "print" wie Python oder "stdout::cout<< "Hello World" ::std:endl;" in C++.
# In VBScript kann man einfach als folgendes machen: 
# Erstens eine .vbs-Datei erstellen: 
# Hier benutze ich einfach den Editor Notapad++, also unter Console: 
n hello_world.vbs
# Jetzt kann man den Code einfach so schreiben: 
MsgBox "Hello World in VBScript"
# D.h. kann man nur mit dem Fenster wissen, ob die Script mit oder ohne Fehler läuft oder nicht. 
# Eine alternative Möglichkeit zum Ausgeben: 
WScript.Echo "Hier ist auch eine Möglichkeit"
# Wenn man ein "" innerhalb dem String ausgeben möchte, muss man doppelt "" eingeben, z.B.:
WScript.Echo "Hier ist auch eine Möglichkeit, ""Hello World "" auszugeben. "

# 2
# Prozeduren deklarieren
sub additionRechnen()
	a = 5 + b
	MsgBox "Das Ergebnis ist: " & a
end sub
# Hier muss man darauf achten: 
# sub liefert keinen Wert zurück. 
# Nur eine Funktion liefert einen Wert zurück.
# Wenn man ertwas innerhalb des Prozedurs ausgeben läßt, kann man einfach ein MsgBox in Sub schreiben. 
# Dazu entsprechender Code heißt "prozeduren.vbs"

# 3 
# Funktionen deklarieren
# Funktion liefert einen Wert zurück
# Aber man muss darauf aufpassen, der Wert hat den gleichen Namen von der Funktion!!!!
Function funktionName()
	funktionname = 5 + b
end Function
# Beispiel Code heißt funktion.vbs

# 4
# Funktion mit Parameter deklarieren
# Parameter heißt die benötigten Variablen in Funktiondeklaration
Function addition_zwei(a, b)
	addition_zwei = a + b
end Function
# a und b sind hier die Parameter von der Funktion addtion_zwei() in Deklaration. 

# Argument heißt die benötigten Variablen in Aufruf von der Funktion in Hauptprogramm
MsgBox "Das Ergebnis ist: " & addition_zwei(a,b)
# a und b sind hier die Argumente beim Aufrufen der Funktion addition_zwei()
# Dazuentsprechender Code heißt parameter.vbs

#5 
# Werteparameter Call by Value in VBScript
# Syntax ist: ByVal a
# Nur der Wert (Value) einer Variable wird an der Funktion oder dem Prozedur übergegeben,
# die Variable bleibt, und zwar der Wert der Variable ausserhalb der Funktion bleibt stehen. 
# Vorteil: 
# Verschiedene Funktionen können immer die gleiche Basis einer Variable bearbeiten. 
# Nachteil:
# Wenn man in verschiedene Stelle den Werte von der Variable ändern möchte, muss man manuell den Wert anpassen. 
Function quadrat(ByVal a)
	a = a^2
	quadrat = a
end Function

' Hauptprogramm:
dim x, ergebnis
x = 4
ergebnis = quadrat(x)
# Dazuentsprechender Code heißt werteParameter.vbs

# 6
# Referenzparemeter
# Syntax ist: ByRef a
# Nicht nur der Wert einer Variable wird geändert, sondern auch die ganze Variable wird geändert, weil die Adresse von der Variable auf dem Speicher stehenbleibt. 
# Vorteil: 
# wenn man den Wert einer Variable auf verschiedenen Stellen ändern möchte, muss man nur einmal den Wert ändern. 
# Nachteil: 
# Man muss darauf achten, nicht falschen den Wert zu ändern. 
# Dazuentsprechende Code heißt referenzParameter.vbs

# 7
# Unterschied zwischen "public" und "private" gilt hauptsächlich in einer Klasse!
# "private" bedeutet, dass die deklarierten Funktionen, Prozeduren und Variablen nur innerhalb der Klasse aufrufbar sind. 
# Alle Funktionen, Prozeduren außerhalb der Klasse können die privaten deklarierten Funktionen, Prozeduren und Variablen nicht aufrufen. 
# Wie "local" in Objektorientierte Programmierung. 
# "public" bedeutet, dass die deklarierten Funktionen, Prozeduren und Variablen außerhalb der Klasse aufrurbar sind. 
# Wie "globle" in OOP.
# Aber man muss darauf achten: 
# VBScript hat keine Module wie C++ oder Python, durch die eine Klasse in einer anderen Code-Datei aufrufbar ist.
# Der Unterschied zwischen public und private in VBScript macht Sinn nur in einer VBScript-Datei. 

# 8 
# "&" bedeutet Strings aneinanderhängen (Konkatenation)
dim i, s
i = 1
s = ""
s = s & i 
# i ist eine Integer 1
# & macht i zu einem String "1". 

# 9 
# While-Wend-Schleife
# Die While-Schleife von VBScript muss mit "wend" unterbrechen. 
# In C++ hat man "break" oder "continue".
# Dazuentsprechender Code heißt while_wend_schleife.vbs

# 10
# While-Schleife
# das Leifword "while" kann entweder nach "do" oder "loop" stehen.
# Unterschied: 
# Wenn while nach "do", 
# werden die Bedingungen vor jedem Schleifdurchlauf geprüft;
# Wenn while nach "loop",
# werden die Bedingungen nach jedem Schleifdurchlauf geprüft.
# Genauer gesagt, wenn while hinter loop steht und die Bedingung nach jedem Schleifendurchlauf geprüft wird, 
# dann wird die Bedingung nicht vollständig ausgeführt, nur bis, wo die Bedingung reicht.
# Z.B.: 
do 
	s = s &  i & ", "
	MsgBox "Jetzt faengt es an: " & i
	i = i + 1
	MsgBox s
loop while i <= 6
# hier wird die Bedingung bis zur Zeile "i = i + 1" ausgeführt. 
# Dazuentsprechender Cope heißt while_schleife_1.vbs


# wenn while hinter do steht und die Bedinung vor jedem Schleifendurchlauf geprüft wird, 
# dann wird die Bedingung trotzdem vollständig ausgeführt. 
# Z.B.:
do while i <= 6
	s = s & i & ", "
	MsgBox "Jetzt faengt es an: " & i
	i = i + 1
	MsgBox s
Loop
# Hier wird die Bedingung vollständig ausgeführt, aber die Bedingung geht danach nicht mehr rein. 
# Dazuentsprechender Code heißt while_schleife_2.vbs

# 11
# Until-Schleife
# die bedeutet, dass die Schleife ausgeführt wird, bis die Bedingung wahr ist. 
# Hier ist eine unendliche Schleife: 
do 
	s = s &  i & ", "
	MsgBox "Jetzt faengt es an: " & i
	i = i + 1
	MsgBox s
loop while i >= 2
# Und dieses Programm kann man beenden, nur indem man bei Taskmanager das Programm beendet. 
# strg + umschalten + esc" -> "mircrosft windows Based script ..." -> "Taske beenden"

# 12
# Do_Loop-Schleife exit
# wenn die while-Schleife eine unendliche Schleife gebildet hat, kann man mit "exit do" unterbrechen. 
# Dazuentsprechender Code heißt do_loop_schleife_exit.vbs
# Aufpassen, wenn man eine if-Schleife dafür schreiben will, 
# muss man immer mit "end if" die If-Schleife austreten. 

# 13
# For-Next_schleife
# Syntax: 
' Verhalten: um 1 vergrößert. 
for i = 1 to 5 step 1
	Anweisung
next

# oder: 
' Um 1 verkleinert. 
for i = 5 to 1 step -1
	Anweisung
next

# Im Vergleich mit C++
for (int i = 1; i <= 5; i++) {
	Anweisung
}

# oder: 
for (int i = 5; i >= 1; i--) {
	Anweisung
}
# Dazuentsprechende Programme heißen: 
# for_next_schleife.vbs
# for_next_schleife_2.vbs
# for_schleife_mit_sub.vbs













